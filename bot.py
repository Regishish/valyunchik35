import logging
import asyncio
import os
from aiogram import Bot, Dispatcher, types
from aiogram.types import InlineKeyboardMarkup, InlineKeyboardButton
from aiogram.utils import executor

API_TOKEN = os.getenv("API_TOKEN")
USER_IDS = [int(uid) for uid in os.getenv("USER_IDS", "").split(",")]

bot = Bot(token=API_TOKEN, parse_mode=types.ParseMode.HTML)
dp = Dispatcher(bot)
logging.basicConfig(level=logging.INFO)

photos_with_captions = [
    ("IMG_9126.jpeg", "‚òÄÔ∏è –ö–æ–≥–¥–∞ —Ç—ã –¥–µ—Ä–∂–∏—à—å –º–æ—é —Ä—É–∫—É ‚Äî –º–Ω–µ —Å–ø–æ–∫–æ–π–Ω–æ."),
    ("IMG_9111.jpeg", "–¢—ã ‚Äî –º–æ–π –¥–æ–º."),
    ("IMG_4979.jpeg", "–¢—ã- —Å–∞–º—ã–π –ª—É—á—à–∏–π. –ü–æ–º–Ω–∏ –æ–± —ç—Ç–æ–º –≤—Å–µ–≥–¥–∞!"),
    ("IMG_5377.jpeg", "–¢—ã —Å–∞–º—ã–π —É–º–Ω—ã–π –º—É–∂—á–∏–Ω–∞ –∏–∑ –≤—Å–µ—Ö, –∫–æ–≥–æ —è –∑–Ω–∞—é."),
    ("IMG_5390.jpeg", "–¢—ã - –º–æ—è –æ–ø–æ—Ä–∞."),
    ("IMG_5863.jpeg", "–õ—é–±–ª—é, –∫–æ–≥–¥–∞ —Ç—ã —Å–º–æ—Ç—Ä–∏—à—å —Ç–∞–∫, –∫–∞–∫ –Ω–∞ —ç—Ç–æ–º —Ñ–æ—Ç–æ."),
    ("IMG_6353.jpeg", "–¢—ã —É–º–µ–µ—à—å –±—ã—Ç—å —Ä–∞–∑–Ω—ã–º ‚Äî –∏ —è –ª—é–±–ª—é –∫–∞–∂–¥–æ–µ —Ç–≤–æ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ."),
    ("IMG_7087.jpeg", "–£ –Ω–∞—Å —Å —Ç–æ–±–æ–π –≤—Å–µ –ø–æ–ª—É—á–∏—Ç—Å—è!"),
    ("IMG_7761.jpeg", "–° —Ç–æ–±–æ–π –¥–∞–∂–µ —Å–∞–º—ã–µ –±—É–¥–Ω–∏—á–Ω—ã–µ –¥–Ω–∏ ‚Äî –∫–∞–∫ –ø—Ä–∞–∑–¥–Ω–∏–∫."),
    ("2B7E2B03.jpeg", "–¢—ã —É–º–µ–µ—à—å –±—ã—Ç—å –Ω–∞—Å—Ç–æ—è—â–∏–º. –ò —ç—Ç–æ –±–µ—Å—Ü–µ–Ω–Ω–æ."),
    ("B31FB0E2.jpeg", "–Ø –ª—é–±–ª—é –Ω–∞—Å. –û—Å–æ–±–µ–Ω–Ω–æ ‚Äî –≤ —Ç–∞–∫–∏–µ –º–æ–º–µ–Ω—Ç—ã."),
    ("TXD5wkJc.jpeg", "–¢—ã ‚Äî –º–æ–π —Å–∞–º—ã–π –ª—É—á—à–∏–π —á–µ–ª–æ–≤–µ–∫ –Ω–∞ —Å–≤–µ—Ç–µ."),
]

tasks = [
    ("üéØ –ü–µ—Ä–≤–æ–µ –∑–∞–¥–∞–Ω–∏–µ: —Å—Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏—Ä—É–π –∑–∞–≤—Ç—Ä–∞–∫ –∏ –æ—Ç–ø—Ä–∞–≤—å –µ–≥–æ —Å—é–¥–∞.", "‚úÖ –ó–∞–≤—Ç—Ä–∞–∫ ‚Äî –∑–∞–ª–æ–≥ –æ—Ç–ª–∏—á–Ω–æ–≥–æ –¥–Ω—è! –ú–æ–ª–æ–¥–µ—Ü!"),
    ("üìû –ü–æ–∑–≤–æ–Ω–∏ –º–∞–º–µ –∏ –ø–æ–∑–¥—Ä–∞–≤—å –µ—ë —Å –¥–Ω–µ–º —Ä–æ–∂–¥–µ–Ω–∏—è —Ç–µ–±—è üòä", "‚úÖ –°—É–ø–µ—Ä! –ú–∞–º—ã ‚Äî —ç—Ç–æ —Å–≤—è—Ç–æ–µ ‚ù§Ô∏è"),
    ("üåä –ó–∞–π–¥–∏ –≤ –º–æ—Ä–µ –æ–¥–∏–Ω —Ä–∞–∑ –∏ –ø—Ä–∏—à–ª–∏ —Ñ–æ—Ç–æ/–≤–∏–¥–µ–æ!", "‚úÖ –ì–µ—Ä–æ–π! –°–∏–ª–∞ –≤–æ–¥—ã ‚Äî —Å —Ç–æ–±–æ–π!"),
    ("üç¥ –í—ã–±–µ—Ä–∏ —Ä–µ—Å—Ç–æ—Ä–∞–Ω –Ω–∞ –≤–µ—á–µ—Ä (–ø—Ä–∏—à–ª–∏ 3 –≤–∞—Ä–∏–∞–Ω—Ç–∞)", "‚úÖ –®–µ—Ñ, –≤—ã —Å–¥–µ–ª–∞–ª–∏ –≤–∫—É—Å–Ω—ã–π –≤—ã–±–æ—Ä üòã"),
    ("üß• –û–¥–µ–Ω—å—Å—è –∫—Ä–∞—Å–∏–≤–æ –¥–ª—è –≤–µ—á–µ—Ä–∞. –ñ–¥—É —Å–µ–ª—Ñ–∏!", "‚úÖ –ö—Ä–∞—Å–∞–≤—á–∏–∫! –¢—ã —Å—Ä–∞–∑–∏—à—å –≤—Å–µ—Ö üòç"),
    ("üí¨ –ü–æ–∫–∞ –∂–¥—ë—à—å –∂–µ–Ω—É, –ø—Ä–æ–π–¥–∏ —Ç–µ—Å—Ç ‚Äî –±—É–¥–µ—Ç –≤–µ—Å–µ–ª–æ!", "‚úÖ –ù—É —Ç—ã –∑–Ω–∞—Ç–æ–∫! –†–µ—Å–ø–µ–∫—Ç üëè"),
    ("üç∑ –í—ã–ø–µ–π –∞–ø–µ—Ä–∏—Ç–∏–≤ –∏ —Å—Ñ–æ—Ç–∫–∞–π –±–æ–∫–∞–ª", "‚úÖ –ü—É—Å—Ç—å –≤–µ—á–µ—Ä –±—É–¥–µ—Ç —Ç–∞–∫–∏–º –∂–µ —è—Ä–∫–∏–º, –∫–∞–∫ —Ç—ã!"),
    ("ü•Ç –£–∂–∏–Ω —Å –∂–µ–Ω–æ–π ‚Äî —Å–¥–µ–ª–∞–π —Ñ–æ—Ç–æ –Ω–∞ –ø–∞–º—è—Ç—å", "‚úÖ –í—ã –∏–¥–µ–∞–ª—å–Ω–∞—è –ø–∞—Ä–∞!"),
    ("üçæ –í–æ–∑—å–º–∏ –ø—Ä–æ—Å–µ–∫–∫–æ/–≤–∏–Ω–æ –∏ –≤–µ—Ä–Ω–∏—Å—å –≤ –Ω–æ–º–µ—Ä", "‚úÖ –û—Å—Ç–∞–ª–æ—Å—å —á—É—Ç—å-—á—É—Ç—å –¥–æ –ø–æ–¥–∞—Ä–∫–∞..."),
    ("üéÅ –ù–∞–π–¥–∏ –ø–æ–¥–∞—Ä–æ–∫: –æ–Ω –ø–æ–¥ '—à—Ç—É–∫–æ–π, –∫–æ—Ç–æ—Ä–∞—è —É –Ω–∞—Å –±—ã–ª–∞ –≤—Å—è–∫–∞—è —Ä–∞–∑–Ω–∞—è, –¥–∞–∂–µ –Ω–∞ –ø–æ–ª–æ–≤–∏–Ω—É –∫—Ä–æ–≤–∞—Ç–∏'", "ü•≥ –ù–∞—à—ë–ª! –° –¥–Ω—ë–º —Ä–æ–∂–¥–µ–Ω–∏—è, –ª—é–±–∏–º—ã–π üíñ"),
]

quiz_questions = [
    ("–ö–∞–∫–æ–π —Å–µ—Ä–∏–∞–ª —Ç—ã –Ω–∏–∫–æ–≥–¥–∞ –Ω–µ —Ö–æ—á–µ—à—å —Å–º–æ—Ç—Ä–µ—Ç—å?", ["–ò–≥—Ä–∞ –ø—Ä–µ—Å—Ç–æ–ª–æ–≤", "–ö–ª—é–∫–≤–µ–Ω–Ω—ã–π —â–µ—Ä–±–µ—Ç", "–í–æ –≤—Å–µ —Ç—è–∂–∫–∏–µ"]),
    ("–ö—Ç–æ –ø–æ—ë—Ç —Ç–≤–æ—é –ª—é–±–∏–º—É—é –ø–µ—Å–Ω—é?", ["Rihanna", "Zivert", "Dua Lipa"]),
    ("–ß—Ç–æ —è —á–∞—â–µ –≤—Å–µ–≥–æ –≥–æ–≤–æ—Ä—é –ø–æ —É—Ç—Ä–∞–º?", ["–î–æ–±—Ä–æ–µ —É—Ç—Ä–æ, –∫–æ—Ç–∏–∫", "–ì–¥–µ –º–æ–∏ —Ç–∞–ø–∫–∏?", "–°–≤–∞—Ä–∏–ª –∫–æ—Ñ–µ?"]),
]

user_states = {}

@dp.message_handler(commands=["start", "go"])
async def send_welcome(message: types.Message):
    if message.from_user.id in USER_IDS:
        markup = InlineKeyboardMarkup().add(
            InlineKeyboardButton("–ù–∞—á–∞—Ç—å –∏–≥—Ä—É", callback_data="start_game")
        )
        user_states[message.from_user.id] = {"task": 0, "in_quiz": False}
        await message.answer("üéâ –ü—Ä–∏–≤–µ—Ç! –ì–æ—Ç–æ–≤ –Ω–∞—á–∞—Ç—å –¥–µ–Ω—å —Å —Å—é—Ä–ø—Ä–∏–∑–∞–º–∏?", reply_markup=markup)

@dp.callback_query_handler(lambda c: c.data == "start_game")
async def start_game(callback_query: types.CallbackQuery):
    await bot.answer_callback_query(callback_query.id)
    user_id = callback_query.from_user.id
    await send_task(user_id)

@dp.message_handler(content_types=types.ContentType.PHOTO)
async def handle_photo(message: types.Message):
    user_id = message.from_user.id
    state = user_states.get(user_id, {})
    task_idx = state.get("task", 0)

    if task_idx < len(tasks):
        await message.reply(tasks[task_idx][1])  # –ø–æ—Ö–≤–∞–ª–∞
        user_states[user_id]["task"] += 1
        await send_task(user_id)
    else:
        await message.reply("üéâ –¢—ã –≤—ã–ø–æ–ª–Ω–∏–ª –≤—Å–µ –∑–∞–¥–∞–Ω–∏—è! –ü—Ä–æ–≤–µ—Ä—å, –Ω–µ –∂–¥—ë—Ç –ª–∏ —Ç–µ–±—è –≥–¥–µ-—Ç–æ –ø–æ–¥–∞—Ä–æ–∫ üòâ")

@dp.message_handler()
async def handle_text(message: types.Message):
    user_id = message.from_user.id
    state = user_states.get(user_id, {})

    if state.get("in_quiz"):
        current_q = state.get("quiz_q", 0)
        if current_q < len(quiz_questions) - 1:
            user_states[user_id]["quiz_q"] += 1
            await send_quiz_question(user_id)
        else:
            state["in_quiz"] = False
            await bot.send_message(user_id, "üß† –ü–æ–∑–¥—Ä–∞–≤–ª—è—é, —Ç—ã –ø–æ—á—Ç–∏ —É —Ü–µ–ª–∏! –ì–æ—Ç–æ–≤ –∫ –ø–æ—Å–ª–µ–¥–Ω–µ–º—É –∑–∞–¥–∞–Ω–∏—é?")
            await send_task(user_id)

async def send_task(user_id):
    state = user_states[user_id]
    task_idx = state.get("task", 0)

    if task_idx == 5:
        state["in_quiz"] = True
        state["quiz_q"] = 0
        await send_quiz_question(user_id)
        return

    if task_idx < len(tasks):
        text = tasks[task_idx][0]
        markup = InlineKeyboardMarkup().add(InlineKeyboardButton("–ì–æ—Ç–æ–≤–æ ‚úÖ", callback_data="done"))
        await bot.send_message(user_id, text, reply_markup=markup)
    else:
        await bot.send_message(user_id, "üéâ –í—Å–µ –∑–∞–¥–∞–Ω–∏—è –≤—ã–ø–æ–ª–Ω–µ–Ω—ã. –¢—ã –º–æ–ª–æ–¥–µ—Ü! –û—Å—Ç–∞–ª–æ—Å—å —Ç–æ–ª—å–∫–æ –Ω–∞–π—Ç–∏ –ø–æ–¥–∞—Ä–æ–∫ üòâ")

@dp.callback_query_handler(lambda c: c.data == "done")
async def handle_done(callback_query: types.CallbackQuery):
    await bot.answer_callback_query(callback_query.id)
    await callback_query.message.reply("üëå –ñ–¥—É —Ñ–æ—Ç–æ/–ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ!")

async def send_quiz_question(user_id):
    state = user_states[user_id]
    q_idx = state["quiz_q"]
    q, options = quiz_questions[q_idx]
    markup = InlineKeyboardMarkup()
    for opt in options:
        markup.add(InlineKeyboardButton(opt, callback_data="quiz_ans"))
    await bot.send_message(user_id, f"üß† –í–æ–ø—Ä–æ—Å: {q}", reply_markup=markup)

@dp.callback_query_handler(lambda c: c.data == "quiz_ans")
async def handle_quiz_answer(callback_query: types.CallbackQuery):
    await bot.answer_callback_query(callback_query.id)
    await callback_query.message.reply("‚úÖ –û—Ç–≤–µ—Ç –∑–∞–ø–∏—Å–∞–Ω!")
    await handle_text(callback_query.message)

async def scheduled_messages():
    for user_id in USER_IDS:
        await bot.send_message(user_id, "üåÖ –î–æ–±—Ä–æ–µ —É—Ç—Ä–æ! –°–µ–≥–æ–¥–Ω—è —Ç—ã –≤ –∏–≥—Ä–µ. –° —Ç–µ–±—è ‚Äî –Ω–∞—Å—Ç—Ä–æ–µ–Ω–∏–µ –∏ –∑–∞–¥–∞–Ω–∏—è, —Å –º–µ–Ω—è ‚Äî —Å—é—Ä–ø—Ä–∏–∑ ‚ù§Ô∏è")
        for i, (photo, caption) in enumerate(photos_with_captions):
            await asyncio.sleep(3600 if i > 0 else 10)
            with open(f"media/{photo}", "rb") as img:
                await bot.send_photo(user_id, img, caption=caption)

async def on_startup(dp):
    asyncio.create_task(scheduled_messages())

if __name__ == "__main__":
    executor.start_polling(dp, on_startup=on_startup)

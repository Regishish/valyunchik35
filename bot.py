
# -*- coding: utf-8 -*-
import os
import logging
import asyncio
from aiogram import Bot, Dispatcher, types
from aiogram.types import InputFile, InlineKeyboardMarkup, InlineKeyboardButton
from aiogram.utils import executor
from datetime import datetime, timedelta

API_TOKEN = os.getenv("API_TOKEN")
USER_IDS = [int(uid) for uid in os.getenv("USER_IDS", "").split(",")]

logging.basicConfig(level=logging.INFO)
bot = Bot(token=API_TOKEN)
dp = Dispatcher(bot)

# === –§–æ—Ç–æ-–∫–æ–º–ø–ª–∏–º–µ–Ω—Ç—ã ===
photos_with_captions = [
    ("2025-06-02 22.32.51.jpg", "‚òÄÔ∏è –ö–æ–≥–¥–∞ —Ç—ã –¥–µ—Ä–∂–∏—à—å –º–æ—é —Ä—É–∫—É ‚Äî –º–Ω–µ —Å–ø–æ–∫–æ–π–Ω–æ."),
    ("2025-06-02 22.33.06.jpg", "–¢—ã ‚Äî –º–æ–π –¥–æ–º."),
    ("2025-06-02 22.33.13.jpg", "–¢—ã- —Å–∞–º—ã–π –ª—É—á—à–∏–π. –ü–æ–º–Ω–∏ –æ–± —ç—Ç–æ–º –≤—Å–µ–≥–¥–∞!"),
    ("2025-06-02 22.33.19.jpg", "–¢—ã —Å–∞–º—ã–π —É–º–Ω—ã–π –º—É–∂—á–∏–Ω–∞ –∏–∑ –≤—Å–µ—Ö, –∫–æ–≥–æ —è –∑–Ω–∞—é."),
    ("2025-06-02 22.33.25.jpg", "–¢—ã - –º–æ—è –æ–ø–æ—Ä–∞."),
    ("2025-06-02 22.33.31.jpg", "–õ—é–±–ª—é, –∫–æ–≥–¥–∞ —Ç—ã —Å–º–æ—Ç—Ä–∏—à—å —Ç–∞–∫, –∫–∞–∫ –Ω–∞ —ç—Ç–æ–º —Ñ–æ—Ç–æ."),
    ("2B7E2B03-87C5-4EB1-B46F-093EA26054E1.jpeg", "–¢—ã —É–º–µ–µ—à—å –±—ã—Ç—å —Ä–∞–∑–Ω—ã–º ‚Äî –∏ —è –ª—é–±–ª—é –∫–∞–∂–¥–æ–µ —Ç–≤–æ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ."),
    ("B31FB0E2-40C1-4970-9B80-807699C9ADEA.jpeg", "–£ –Ω–∞—Å —Å —Ç–æ–±–æ–π –≤—Å–µ –ø–æ–ª—É—á–∏—Ç—Å—è!"),
]

QUESTS = [
    {"text": "–ó–∞–¥–∞–Ω–∏–µ 1: –ü–æ–∑–∞–≤—Ç—Ä–∞–∫–∞—Ç—å –≤–∫—É—Å–Ω–æ. –°—Ñ–æ—Ç–∫–∞–π —Å–≤–æ–π –∑–∞–≤—Ç—Ä–∞–∫ ‚Äî —è –ø—Ä–æ–≤–µ—Ä—é üòä"},
    {"text": "–¢–µ–ø–µ—Ä—å –ø–æ–∑–≤–æ–Ω–∏ —Å–≤–æ–µ–π –º–∞–º–µ –∏ –ø–æ–∑–¥—Ä–∞–≤—å –µ–µ —Å —Ç–µ–º, —á—Ç–æ —É –Ω–µ–µ —Ç–∞–∫–æ–π –ø—Ä–µ–∫—Ä–∞—Å–Ω—ã–π —Å—ã–Ω! üòä"},
    {"text": "–¢–µ–ø–µ—Ä—å –∑–∞–¥—É—Ç—å —Å–≤–µ—á—É  –∏ –∑–∞–≥–∞–¥–∞—Ç—å –∂–µ–ª–∞–Ω–∏–µ üéÇ"},
    {"text": "–§–æ—Ç–æ –∏–∑ –º–æ—Ä—è –∏–ª–∏ –±–∞—Å—Å–µ–π–Ω–∞ üåä –õ–∏—Ü–æ ‚Äî –±–µ–∑—É–º–Ω–æ —Å—á–∞—Å—Ç–ª–∏–≤–æ–µ!"},
    {"text": "–í—Ä–µ–º—è –∞–ø–µ—Ä–µ—Ç–∏–≤–∞ –∏ –æ–±–µ–¥–∞: –≤—ã–±–µ—Ä–∏ –ø–∏–≤–æ/–Ω–µ–≥—Ä–æ–Ω–∏/–∞–ø–µ—Ä–æ–ª—å/—á–∞–π –∏–ª–∏ –≤–æ–¥—É –∏ –ø—Ä–∏—à–ª–∏ –º–Ω–µ —Ñ–æ—Ç–æ –±–æ–∫–∞–ª–∞ –∏–ª–∏ —Å–µ–ª—Ñ–∏!"},
    {"text": "–í—ã–±–µ—Ä–∏ —Ä–µ—Å—Ç–æ—Ä–∞–Ω –Ω–∞ –≤–µ—á–µ—Ä, –≥–¥–µ –º—ã –æ—Ç–ø—Ä–∞–∑–¥–Ω—É–µ–º —Ç–≤–æ—ë 35-–ª–µ—Ç–∏–µ:\n1. –í–æ—Å—Ç–æ—á–Ω—ã–π –∫–≤–∞—Ä—Ç–∞–ª\n2. –ü–ª–∞–∫—É—á–∞—è –ò–≤–∞\n3. –°–ê–ù–†–ï–ú–û\n4. –ß–∏—Ç—Ç–∞ –ú–∞—Ä–≥–∞—Ä–∏—Ç–∞\n5. –†–µ–∑–∑–æ"}
]

user_states = {}
current_questions = {}
correct_answers = {
    1: "–ü—É—Ç–µ—à–µ—Å—Ç–≤—É–µ–º",
    2: "–ò–≥—Ä–∞ –ø—Ä–µ—Å—Ç–æ–ª–æ–≤",
    3: "–ù–µ —Ç—Ä–æ–≥–∞–π –º–µ–Ω—è",
    4: "–í –∑–∞–ª–µ –≤ —É–≥–ª—É",
    5: "–í—Å—ë –∑–∞–≤–∏—Å–∏—Ç –æ—Ç —Å–ª—É—á–∞—è",
    6: "–¢—É—Ä–µ—Ü–∫–∏–µ —Å–µ—Ä–∏–∞–ª—ã",
    7: "–ó–∞ –≤—Å—ë —ç—Ç–æ –≤–º–µ—Å—Ç–µ",
    8: "–í—Å–µ –≤–º–µ—Å—Ç–µ",
    9: "–í—Å–µ –≤–º–µ—Å—Ç–µ",
}

questions = {
    1: "–ß—Ç–æ –º—ã –¥–µ–ª–∞–µ–º –ø–æ —Ç–≤–æ–µ–º—É –º–Ω–µ–Ω–∏—é —Å–ª–∏—à–∫–æ–º —á–∞—Å—Ç–æ, –∞ —è –≤—Å–µ–≥–¥–∞ –Ω–µ –ø—Ä–æ—Ç–∏–≤?",
    2: "–ö–∞–∫–æ–π —Å–µ—Ä–∏–∞–ª —Ç—ã –Ω–µ —Ö–æ—Ç–µ–ª —Å–º–æ—Ç—Ä–µ—Ç—å, —è —Ç–µ–±—è –∑–∞—Å—Ç–∞–≤–∏–ª–∞, –∞ –ø–æ—Ç–æ–º —Ç—ã –∫–∞–∞–∞–∞–∫ –≤—Ç—è–Ω—É–ª—Å—è!",
    3: "–ß—Ç–æ —Ç—ã —á–∞—â–µ –≤—Å–µ–≥–æ –≥–æ–≤–æ—Ä–∏—à—å —É—Ç—Ä–æ–º?",
    4: "–ì–¥–µ —á–∞—â–µ –≤—Å–µ–≥–æ –æ–∫–∞–∑—ã–≤–∞—é—Ç—Å—è —Ç–≤–æ–∏ –Ω–æ—Å–∫–∏?",
    5: "–ö—Ç–æ –ø—Ä–æ—Å—ã–ø–∞–µ—Ç—Å—è —Ä–∞–Ω—å—à–µ?",
    6: "–ß—Ç–æ –ª—é–±–∏—Ç —Ç–≤–æ—è –∂–µ–Ω–∞, –∞ —Ç—ã –Ω–µ –æ—á–µ–Ω—å?",
    7: "–ó–∞ —á—Ç–æ —Ç–≤–æ—è –∂–µ–Ω–∞ —Ç–µ–±—è –±–æ–ª—å—à–µ –≤—Å–µ–≥–æ –ª—é–±–∏—Ç?",
    8: "–¢–≤–æ—è —Å—É–ø–µ—Ä—Å–ø–æ—Å–æ–±–Ω–æ—Å—Ç—å ‚Äî —ç—Ç–æ:",
    9: "–ß–µ–º —Ç—ã –≥–æ—Ä–¥–∏—à—å—Å—è –≤ —Å–µ–±–µ –±–æ–ª—å—à–µ –≤—Å–µ–≥–æ?",
    10: "–ö—É–¥–∞ –º—ã —Ç–æ—á–Ω–æ –Ω–∏–∫–æ–≥–¥–∞ –Ω–µ –ø–æ–µ–¥–µ–º –≤ –æ—Ç–ø—É—Å–∫?",
}

@dp.message_handler(commands=['start'])
async def start_game(message: types.Message):
    if message.from_user.id in USER_IDS:
        user_states[message.from_user.id] = 0
        await message.answer("üéâ –ü–æ–∑–¥—Ä–∞–≤–ª—è—é, —Ç—ã –≤ –∏–≥—Ä–µ! –°–µ–≥–æ–¥–Ω—è —Ç–µ–±—è –∂–¥—ë—Ç –Ω–µ—Å–∫–æ–ª—å–∫–æ –∑–∞–¥–∞–Ω–∏–π, –∞ –≤ –∫–æ–Ω—Ü–µ ‚Äî –ø–æ–¥–∞—Ä–æ—á–µ–∫.")
        await send_next_quest(message.from_user.id)

async def send_question(user_id, q_num):
    current_questions[user_id] = q_num
    q_text = questions[q_num]
    if q_num == 10:
        await bot.send_message(
            user_id,
            f"üß© –í–æ–ø—Ä–æ—Å 10:\n{q_text} (–û—Ç–∫—Ä—ã—Ç—ã–π –æ—Ç–≤–µ—Ç)"
        )
    else:
        options = [correct_answers[q_num], "–ù–µ–≤–µ—Ä–Ω—ã–π 1", "–ù–µ–≤–µ—Ä–Ω—ã–π 2"]
        markup = InlineKeyboardMarkup()
        for ans in set(options):
            markup.add(InlineKeyboardButton(ans, callback_data=f"answer_{ans}"))

        await bot.send_message(
            user_id,
            f"üß© –í–æ–ø—Ä–æ—Å {q_num}:\n{q_text}",
            reply_markup=markup
        )

@dp.callback_query_handler(lambda c: c.data == "quest_done")
async def handle_quest_done(callback_query: types.CallbackQuery):
    user_id = callback_query.from_user.id
    user_states[user_id] += 1
    await bot.answer_callback_query(callback_query.id)
    await bot.send_message(user_id, "‚úÖ –ó–∞–¥–∞–Ω–∏–µ –≤—ã–ø–æ–ª–Ω–µ–Ω–æ, —Ç—ã –º–æ–ª–æ–¥–µ—Ü!")
    await send_next_quest(user_id)

@dp.callback_query_handler(lambda c: c.data.startswith("answer_"))
async def handle_answer(callback_query: types.CallbackQuery):
    user_id = callback_query.from_user.id
    answer = callback_query.data[len("answer_"):]
    q_num = current_questions.get(user_id, 1)
    correct = correct_answers.get(q_num, "")
    if answer == correct:
        await bot.answer_callback_query(callback_query.id, text="‚úÖ –ü—Ä–∞–≤–∏–ª—å–Ω–æ!")
        if q_num == 10:
            await bot.send_message(user_id, "üéâ –ü–æ–∑–¥—Ä–∞–≤–ª—è—é, —Ç—ã –ø—Ä–æ—à—ë–ª –æ–ø—Ä–æ—Å! –¢—ã –ø–æ—á—Ç–∏ —É —Ü–µ–ª–∏‚Ä¶ –°–∫–æ—Ä–æ —Ç–µ–±—è –∂–¥—ë—Ç –∫–æ–µ-—á—Ç–æ –æ—á–µ–Ω—å –ø—Ä–∏—è—Ç–Ω–æ–µ üéÅ‚ù§Ô∏è")
            await bot.send_message(user_id, "üïò –§–∏–Ω–∞–ª—å–Ω–æ–µ –∑–∞–¥–∞–Ω–∏–µ:\n–û–±–Ω–∏–º–∏ –∂–µ–Ω—É –∏ –ø–æ–ª—É—á–∏ –ø–æ–¥–∞—Ä–æ–∫ üéÅ\n–¢—ã –ø—Ä–æ—à—ë–ª –∏–≥—Ä—É!")
        else:
            await send_question(user_id, q_num + 1)
    else:
        await bot.answer_callback_query(callback_query.id, text="‚ùå –ù–µ–≤–µ—Ä–Ω–æ. –ü–æ–ø—Ä–æ–±—É–π –µ—â—ë —Ä–∞–∑!")

async def send_hourly_compliments():
    while True:
        now = datetime.now()
        if 9 <= now.hour <= 21:
            index = (now.hour - 9) % len(photos_with_captions)
            for user_id in USER_IDS:
                photo, caption = photos_with_captions[index]
                try:
                    await bot.send_photo(chat_id=user_id, photo=InputFile(photo), caption=caption)
                except Exception as e:
                    logging.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —Ñ–æ—Ç–æ: {e}")
        await asyncio.sleep(3600)

if __name__ == "__main__":
    loop = asyncio.get_event_loop()
    loop.create_task(send_hourly_compliments())
    executor.start_polling(dp, skip_updates=True)

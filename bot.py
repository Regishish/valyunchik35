# -*- coding: utf-8 -*-
import os
from aiogram import Bot, Dispatcher, types
from aiogram.utils import executor
import logging
import asyncio
from aiogram import Bot, Dispatcher, types
from aiogram.types import InputFile, InlineKeyboardMarkup, InlineKeyboardButton, CallbackQuery
from aiogram.utils import executor
from datetime import datetime

API_TOKEN = os.getenv("API_TOKEN")
USER_IDS = [int(uid) for uid in os.getenv("USER_IDS", "").split(",")]

logging.basicConfig(level=logging.INFO)
bot = Bot(token=API_TOKEN)
dp = Dispatcher(bot)

# === –§–æ—Ç–æ-–∫–æ–º–ø–ª–∏–º–µ–Ω—Ç—ã ===
photos_with_captions = [
("2025-06-02 22.32.51.jpg", "‚òÄÔ∏è –ö–æ–≥–¥–∞ —Ç—ã –¥–µ—Ä–∂–∏—à—å –º–æ—é —Ä—É–∫—É ‚Äî –º–Ω–µ —Å–ø–æ–∫–æ–π–Ω–æ."),
("2025-06-02 22.33.06.jpg", "–¢—ã ‚Äî –º–æ–π –¥–æ–º."),
("2025-06-02 22.33.13.jpg", "–¢—ã- —Å–∞–º—ã–π –ª—É—á—à–∏–π. –ü–æ–º–Ω–∏ –æ–± —ç—Ç–æ–º –≤—Å–µ–≥–¥–∞!"),
("2025-06-02 22.33.19.jpg", "–¢—ã —Å–∞–º—ã–π —É–º–Ω—ã–π –º—É–∂—á–∏–Ω–∞ –∏–∑ –≤—Å–µ—Ö, –∫–æ–≥–æ —è –∑–Ω–∞—é."),
("2025-06-02 22.33.25.jpg", "–¢—ã - –º–æ—è –æ–ø–æ—Ä–∞."),
("2025-06-02 22.33.31.jpg", "–õ—é–±–ª—é, –∫–æ–≥–¥–∞ —Ç—ã —Å–º–æ—Ç—Ä–∏—à—å —Ç–∞–∫, –∫–∞–∫ –Ω–∞ —ç—Ç–æ–º —Ñ–æ—Ç–æ."),
("2B7E2B03-87C5-4EB1-B46F-093EA26054E1.jpeg", "–¢—ã —É–º–µ–µ—à—å –±—ã—Ç—å —Ä–∞–∑–Ω—ã–º ‚Äî –∏ —è –ª—é–±–ª—é –∫–∞–∂–¥–æ–µ —Ç–≤–æ—ë —Å–æ—Å—Ç–æ—è–Ω–∏–µ."),
("B31FB0E2-40C1-4970-9B80-807699C9ADEA.jpeg", "–£ –Ω–∞—Å —Å —Ç–æ–±–æ–π –≤—Å–µ –ø–æ–ª—É—á–∏—Ç—Å—è!"),
]

QUESTS = [
{"text": "üç≥ –ó–∞–¥–∞–Ω–∏–µ 1: –ü–æ–∑–∞–≤—Ç—Ä–∞–∫–∞—Ç—å –≤–∫—É—Å–Ω–æ. –°—Ñ–æ—Ç–∫–∞–π —Å–≤–æ–π –∑–∞–≤—Ç—Ä–∞–∫ ‚Äî —è –ø—Ä–æ–≤–µ—Ä—é üòä"},
{"text": "üìû –ó–∞–¥–∞–Ω–∏–µ 2: –¢–µ–ø–µ—Ä—å –ø–æ–∑–≤–æ–Ω–∏ —Å–≤–æ–µ–π –º–∞–º–µ –∏ –ø–æ–∑–¥—Ä–∞–≤—å –µ—ë —Å —Ç–µ–º, —á—Ç–æ —É –Ω–µ—ë —Ç–∞–∫–æ–π –ø—Ä–µ–∫—Ä–∞—Å–Ω—ã–π —Å—ã–Ω! üíê"},
{"text": "üéÇ –ó–∞–¥–∞–Ω–∏–µ 3: –í—Ä–µ–º—è –∑–∞–¥—É—Ç—å —Å–≤–µ—á—É –Ω–∞ –≤–æ–ª—à–µ–±–Ω–æ–º —Ç–æ—Ä—Ç–µ –∏ –∑–∞–≥–∞–¥–∞—Ç—å –∂–µ–ª–∞–Ω–∏–µ!"},
{"text": "üåä –ó–∞–¥–∞–Ω–∏–µ 4: –°–¥–µ–ª–∞–π —Ñ–æ—Ç–æ –∏–∑ –º–æ—Ä—è –∏–ª–∏ –±–∞—Å—Å–µ–π–Ω–∞. –õ–∏—Ü–æ ‚Äî –±–µ–∑—É–º–Ω–æ —Å—á–∞—Å—Ç–ª–∏–≤–æ–µ!"},
{"text": "üçπ –ó–∞–¥–∞–Ω–∏–µ 5: –í—Ä–µ–º—è –∞–ø–µ—Ä–∏—Ç–∏–≤–∞ –∏ –≤–∫—É—Å–Ω–æ–≥–æ –æ–±–µ–¥–∞! –° —Ç–µ–±—è —Å–µ–ª—Ñ–∏ —Å –±–æ–∫–∞–ª–æ–º –ø–∏–≤–∞/–Ω–µ–≥—Ä–æ–Ω–∏/–∞–ø–µ—Ä–æ–ª—è/—á–µ–≥–æ —Ö–æ—á–µ—à—å!"},
{"text": "üíÉ –ó–∞–¥–∞–Ω–∏–µ 6: –í–∫–ª—é—á–∏ —Å–≤–æ—é –ª—é–±–∏–º—É—é –ø–µ—Å–Ω—é –∏ –ø–æ—Ç–∞–Ω—Ü—É–π. –í –∫–∞—á–µ—Å—Ç–≤–µ –ø—Ä—É—Ñ–æ–≤ ‚Äî –∂–µ–Ω–∞ –¥–æ–ª–∂–Ω–∞ –≤–∏–¥–µ—Ç—å!"},
{"text": "üìã –ó–∞–¥–∞–Ω–∏–µ 7: –¢—ã –ø–æ—á—Ç–∏ –Ω–∞ —Ñ–∏–Ω–∏—à–µ! –î–µ—Ä–∂–∏—Å—å –µ—â—ë —á—É—Ç—å-—á—É—Ç—å üòâ"},
{"text": "üéÅ –§–∏–Ω–∞–ª—å–Ω–æ–µ –∑–∞–¥–∞–Ω–∏–µ: –ù–∞–π–¥–∏ –ø–æ–¥–∞—Ä–æ–∫! –û–Ω —Å–ø—Ä—è—Ç–∞–Ω –ø–æ–¥ —à—Ç—É–∫–æ–π, –∫–æ—Ç–æ—Ä–∞—è —É –Ω–∞—Å –±—ã–ª–∞ –≤—Å—è–∫–∞—è —Ä–∞–∑–Ω–∞—è, –¥–∞–∂–µ –Ω–∞ –ø–æ–ª–æ–≤–∏–Ω—É –∫—Ä–æ–≤–∞—Ç–∏ üòÑ"}
]

compliments = [
"ü•ê –ó–∞–≤—Ç—Ä–∞–∫ –≤—ã–≥–ª—è–¥–∏—Ç —Ç–∞–∫, —á—Ç–æ Michelin –±—ã –ø–æ–∑–∞–≤–∏–¥–æ–≤–∞–ª! –ß—Ç–æ –µ—â—ë –Ω—É–∂–Ω–æ –¥–ª—è –Ω–∞—Å—Ç—Ä–æ–µ–Ω–∏—è?",
"üìû –û—Ç–ª–∏—á–Ω–æ, —Å–ø–∞—Å–∏–±–æ! –≠—Ç–æ –±—ã–ª–æ –≤–∞–∂–Ω–æ. –¢–µ–ø–µ—Ä—å —É –Ω–∞—Å +100 –∫ –∫–∞—Ä–º–µ üíï",
"üéÇ –≠—Ç–æ –≤–æ–ª—à–µ–±–Ω—ã–π —Ç–æ—Ä—Ç, –≤–æ–ª—à–µ–±–Ω—ã–π –¥–µ–Ω—å ‚Äî –∏ –∂–µ–ª–∞–Ω–∏–µ? –û–±—è–∑–∞—Ç–µ–ª—å–Ω–æ —Å–±—É–¥–µ—Ç—Å—è!",
"üèñÔ∏è –ù–∞ —ç—Ç–æ–º –ø–ª—è–∂–µ —Ç—ã ‚Äî –ê–ø–ø–æ–ª–æ–Ω –≤ —Å–≤–æ–µ–π —Å—Ç–∏—Ö–∏–∏!",
"üçπ –û—Ç–ª–∏—á–Ω—ã–π –≤—ã–±–æ—Ä, –ß–∏–Ω-—á–∏–Ω! –ü—É—Å—Ç—å –≤ —ç—Ç–æ–º –±–æ–∫–∞–ª–µ –±—É–¥–µ—Ç –≤—Å—è –ª—ë–≥–∫–æ—Å—Ç—å –¥–Ω—è!",
"üï∫ –¢—ã ‚Äî –∑–≤–µ–∑–¥–∞ —Ç–∞–Ω—Ü–ø–æ–ª–∞! –î–∞–∂–µ –µ—Å–ª–∏ –æ–Ω ‚Äî –±–∞–ª–∫–æ–Ω üòÑ",
"üß† –ü–µ—Ä–µ—Ö–æ–¥–∏–º –∫ –≤–µ—Å—ë–ª–æ–º—É –æ–ø—Ä–æ—Å—É!",
"üéÅ –£—Ä–∞! –¢–µ–ø–µ—Ä—å –æ—Å—Ç–∞–ª–æ—Å—å —Ç–æ–ª—å–∫–æ –Ω–∞–π—Ç–∏ –ø–æ–¥–∞—Ä–æ–∫ üéâ"
]

questions = [
{
    "text": "1Ô∏è‚É£ –ß—Ç–æ –º—ã –¥–µ–ª–∞–µ–º —Å–ª–∏—à–∫–æ–º —á–∞—Å—Ç–æ, –∞ —è –≤—Å–µ–≥–¥–∞ –Ω–µ –ø—Ä–æ—Ç–∏–≤?",
    "options": {
        "–ü—É—Ç–µ—à–µ—Å—Ç–≤—É–µ–º": (True, "‚úÖ –ê–±—Å–æ–ª—é—Ç–Ω–æ! –õ–∏—à—å –±—ã –≤–º–µ—Å—Ç–µ."),
        "–ï–¥–∏–º": (False, "–ù—É —è, –∫–æ–Ω–µ—á–Ω–æ, –≤–∫—É—Å–Ω–æ –≥–æ—Ç–æ–≤–ª—é, –Ω–æ –Ω–µ –æ–Ω–æ!"),
        "–°–ø–∏–º": (False, "–°–ø–∏—à—å —Ö–∞—Ö–∞ üò¥"),
        "–°–∞–º –∑–Ω–∞–µ—à—å —á—Ç–æ‚Ä¶": (False, "–ú–∏–º–æ, –Ω–æ —è –Ω–µ –ø—Ä–æ—Ç–∏–≤ üòè")
    }
},
{
    "text": "2Ô∏è‚É£ –ö–∞–∫–æ–π —Å–µ—Ä–∏–∞–ª —è –∑–∞—Å—Ç–∞–≤–∏–ª–∞ —Ç–µ–±—è —Å–º–æ—Ç—Ä–µ—Ç—å, —Ç—ã —Å–æ–ø—Ä–æ—Ç–∏–≤–ª—è–ª—Å—è, –∞ –ø–æ—Ç–æ–º –∫–∞–∞–∞–∞–∫ –≤—Ç—è–Ω—É–ª—Å—è!",
    "options": {
        "–ó–∏–º–æ—Ä–æ–¥–æ–∫": (False, "–¢—ã, –∫–æ–Ω–µ—á–Ω–æ, –∑–Ω–∞–µ—à—å –≤—Å–µ—Ö –ö–æ—Ä—Ö–∞–Ω–æ–≤, –Ω–æ –Ω–µ—Ç üòÖ"),
        "–û–ª–µ–Ω—ë–Ω–æ–∫": (False, "–í—ã–±–∏—Ä–∞–ª–∏ –≤–º–µ—Å—Ç–µ!"),
        "–û—Ç—á–∞—è–Ω–Ω—ã–µ –¥–æ–º–æ—Ö–æ–∑—è–π–∫–∏": (False, "–ù–µ —Å–º–æ—Ç—Ä–µ–ª–∏... –ø–æ–∫–∞ –µ—â—ë))"),
        "–ò–≥—Ä–∞ –ø—Ä–µ—Å—Ç–æ–ª–æ–≤": (True, "üêâ –û –¥–∞! –ú—ã –µ—â—ë —Ä–µ—à–∏–ª–∏ –∫ –ø–µ—Ä—Å–æ–Ω–∞–∂–∞–º –Ω–µ –ø—Ä–∏–≤—è–∑—ã–≤–∞—Ç—å—Å—è üòÜ")
    }
}
]

user_states = {}
quiz_progress = {}

@dp.message_handler(commands=['start'])
async def start_game(message: types.Message):
    if message.from_user.id in USER_IDS:
        user_id = message.from_user.id
        user_states[user_id] = 0
        quiz_progress[user_id] = 0
        await message.answer("üéâ –ü–æ–∑–¥—Ä–∞–≤–ª—è—é, —Ç—ã –≤ –∏–≥—Ä–µ! –°–µ–≥–æ–¥–Ω—è —Ç–µ–±—è –∂–¥—ë—Ç –Ω–µ—Å–∫–æ–ª—å–∫–æ –∑–∞–¥–∞–Ω–∏–π, –∞ –≤ –∫–æ–Ω—Ü–µ ‚Äî –ø–æ–¥–∞—Ä–æ—á–µ–∫.")
        await send_next_quest(user_id)

async def send_next_quest(user_id):
    index = user_states.get(user_id, 0)

    if index < len(QUESTS):
        quest_text = QUESTS[index]["text"]
        markup = InlineKeyboardMarkup()
        markup.add(InlineKeyboardButton("–ì–æ—Ç–æ–≤–æ ‚úÖ", callback_data="ready"))
        await bot.send_message(
            user_id,
            quest_text + "\n\nüì∏ –°–¥–µ–ª–∞–ª –∑–∞–¥–∞–Ω–∏–µ? –ñ–º–∏ ¬´–ì–æ—Ç–æ–≤–æ¬ª, –µ—Å–ª–∏ –≤—Å—ë –≤—ã–ø–æ–ª–Ω–µ–Ω–æ!",
            reply_markup=markup
        )
    elif index == len(QUESTS):
        await bot.send_message(user_id, "üéØ –¢–µ–ø–µ—Ä—å ‚Äî –º–∏–Ω–∏-–≤–∏–∫—Ç–æ—Ä–∏–Ω–∞ üòä")
        quiz_progress[user_id] = 0
        await send_quiz_sequence(user_id)
    else:
        await bot.send_message(user_id, "üéâ –í—Å—ë –≤—ã–ø–æ–ª–Ω–µ–Ω–æ! –ü–æ–∑–¥—Ä–∞–≤–ª—è—é! üéà")

@dp.callback_query_handler(lambda c: c.data == "ready")
async def handle_ready(callback_query: CallbackQuery):
    user_id = callback_query.from_user.id
    index = user_states.get(user_id, 0)

    await callback_query.answer("‚úÖ –ó–∞–¥–∞–Ω–∏–µ –æ—Ç–º–µ—á–µ–Ω–æ –∫–∞–∫ –≤—ã–ø–æ–ª–Ω–µ–Ω–Ω–æ–µ!")

    if index < len(compliments):
        await bot.send_message(user_id, compliments[index])

    user_states[user_id] += 1
    await send_next_quest(user_id)

quiz_progress = {}

@dp.callback_query_handler(lambda c: c.data.startswith("quiz|||"))
async def handle_quiz_answer(callback_query: types.CallbackQuery):
    user_id = callback_query.from_user.id
    parts = callback_query.data.split("|||", 2)

    parts = callback_query.data.split("|||", 2)

if len(parts) < 3:
    comment = "ü§î –ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π –æ—Ç–≤–µ—Ç"
    await callback_query.answer()
    await bot.send_message(user_id, f"‚ùå –ù–µ—Ç, –Ω–µ —Ç–∞–∫! {comment}")
    return

    _, q_idx_str, selected = parts
    try:
        q_idx = int(q_idx_str)
    except ValueError:
        await callback_query.answer("ü§î –ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π –æ—Ç–≤–µ—Ç")
        return

    if q_idx >= len(questions):
        await callback_query.answer("üß† –í–∏–∫—Ç–æ—Ä–∏–Ω–∞ —É–∂–µ –∑–∞–≤–µ—Ä—à–µ–Ω–∞.")
        return

    current_progress = quiz_progress.get(user_id, 0)
    if q_idx != current_progress:
        await callback_query.answer("‚è≠ –û—Ç–≤–µ—Ç –Ω–µ –ø—Ä–∏–Ω—è—Ç: —Ç—ã –ª–∏–±–æ —É–∂–µ –ø—Ä–æ—à—ë–ª —ç—Ç–æ—Ç –≤–æ–ø—Ä–æ—Å, –ª–∏–±–æ –µ—â—ë –Ω–µ –¥–æ—à—ë–ª –¥–æ –Ω–µ–≥–æ")
        return

    if selected in question["options"]:
        is_correct, comment = question["options"][selected]
        await callback_query.answer()
        await bot.send_message(user_id, comment)

        if is_correct:
            quiz_progress[user_id] = q_idx + 1
            await asyncio.sleep(1)
            if quiz_progress[user_id] < len(questions):
                await send_quiz_sequence(user_id)
            else:
                await bot.send_message(user_id, "üéâ –¢—ã –ø—Ä–æ—à—ë–ª –≤—Å–µ –≤–æ–ø—Ä–æ—Å—ã! üéÅ")
                user_states[user_id] += 1
                await send_next_quest(user_id)
        else:
            await bot.send_message(user_id, "‚ùå –ù–µ—Ç, –Ω–µ —Ç–∞–∫! –ü–æ–ø—Ä–æ–±—É–π –µ—â—ë —Ä–∞–∑.")

    else:
        await callback_query.answer("ü§î –ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π –æ—Ç–≤–µ—Ç")
        return

    _, q_idx_str, selected = parts
    try:
        q_idx = int(q_idx_str)
    except ValueError:
        await callback_query.answer("ü§î –ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π –æ—Ç–≤–µ—Ç")
        return

    if q_idx >= len(questions):
        await callback_query.answer("üß† –í–∏–∫—Ç–æ—Ä–∏–Ω–∞ —É–∂–µ –∑–∞–≤–µ—Ä—à–µ–Ω–∞.")
        return

    current_progress = quiz_progress.get(user_id, 0)
    if q_idx != current_progress:
        await callback_query.answer("‚è≠ –û—Ç–≤–µ—Ç –Ω–µ –ø—Ä–∏–Ω—è—Ç: —Ç—ã –ª–∏–±–æ —É–∂–µ –ø—Ä–æ—à—ë–ª —ç—Ç–æ—Ç –≤–æ–ø—Ä–æ—Å, –ª–∏–±–æ –µ—â—ë –Ω–µ –¥–æ—à—ë–ª –¥–æ –Ω–µ–≥–æ")
        return

    question = questions[q_idx]
    if selected in question["options"]:
        is_correct, comment = question["options"][selected]
        await callback_query.answer()
        await bot.send_message(user_id, comment)
        if is_correct:
            quiz_progress[user_id] = q_idx + 1
            await asyncio.sleep(1)
            if quiz_progress[user_id] < len(questions):
                await send_quiz_sequence(user_id)
            else:
                await bot.send_message(user_id, "üéâ –¢—ã –ø—Ä–æ—à—ë–ª –≤—Å–µ –≤–æ–ø—Ä–æ—Å—ã! üéÅ")
                user_states[user_id] += 1
                if user_states[user_id] <= len(QUESTS):
                    await send_next_quest(user_id)
    else:
        await callback_query.answer("ü§î –ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π –æ—Ç–≤–µ—Ç")

questions = [
{
    "text": "1Ô∏è‚É£ –ß—Ç–æ –º—ã –¥–µ–ª–∞–µ–º —Å–ª–∏—à–∫–æ–º —á–∞—Å—Ç–æ, –∞ —è –≤—Å–µ–≥–¥–∞ –Ω–µ –ø—Ä–æ—Ç–∏–≤?",
    "options": {
        "–ü—É—Ç–µ—à–µ—Å—Ç–≤—É–µ–º": (True, "‚úÖ –ê–±—Å–æ–ª—é—Ç–Ω–æ! –õ–∏—à—å –±—ã –≤–º–µ—Å—Ç–µ."),
        "–ï–¥–∏–º": (False, "–ù—É —è, –∫–æ–Ω–µ—á–Ω–æ, –≤–∫—É—Å–Ω–æ –≥–æ—Ç–æ–≤–ª—é, –Ω–æ –Ω–µ –æ–Ω–æ!"),
        "–°–ø–∏–º": (False, "–°–ø–∏—à—å —Ö–∞—Ö–∞ üò¥"),
        "–°–∞–º –∑–Ω–∞–µ—à—å —á—Ç–æ‚Ä¶": (False, "–ú–∏–º–æ, –Ω–æ —è –Ω–µ –ø—Ä–æ—Ç–∏–≤ üòè")
    }
},
{
        "text": "2Ô∏è‚É£ –ö–∞–∫–æ–π —Å–µ—Ä–∏–∞–ª —è –∑–∞—Å—Ç–∞–≤–∏–ª–∞ —Ç–µ–±—è —Å–º–æ—Ç—Ä–µ—Ç—å, —Ç—ã —Å–æ–ø—Ä–æ—Ç–∏–≤–ª—è–ª—Å—è, –∞ –ø–æ—Ç–æ–º –∫–∞–∞–∞–∞–∫ –≤—Ç—è–Ω—É–ª—Å—è!",
        "options": {
            "–ó–∏–º–æ—Ä–æ–¥–æ–∫": (False, "–¢—ã, –∫–æ–Ω–µ—á–Ω–æ, –∑–Ω–∞–µ—à—å –≤—Å–µ—Ö –ö–æ—Ä—Ö–∞–Ω–æ–≤, –Ω–æ –Ω–µ—Ç üòÖ"),
            "–û–ª–µ–Ω—ë–Ω–æ–∫": (False, "–í—ã–±–∏—Ä–∞–ª–∏ –≤–º–µ—Å—Ç–µ!"),
            "–û—Ç—á–∞—è–Ω–Ω—ã–µ –¥–æ–º–æ—Ö–æ–∑—è–π–∫–∏": (False, "–ù–µ —Å–º–æ—Ç—Ä–µ–ª–∏... –ø–æ–∫–∞ –µ—â—ë))"),
            "–ò–≥—Ä–∞ –ø—Ä–µ—Å—Ç–æ–ª–æ–≤": (True, "üêâ –û –¥–∞! –ú—ã –µ—â—ë —Ä–µ—à–∏–ª–∏ –∫ –ø–µ—Ä—Å–æ–Ω–∞–∂–∞–º –Ω–µ –ø—Ä–∏–≤—è–∑—ã–≤–∞—Ç—å—Å—è üòÜ")
    }
},
{
        "text": "3Ô∏è‚É£ –ß—Ç–æ —Ç—ã —á–∞—â–µ –≤—Å–µ–≥–æ –≥–æ–≤–æ—Ä–∏—à—å —É—Ç—Ä–æ–º?",
        "options": {
            "–î–æ–±—Ä–æ–µ —É—Ç—Ä–æ, –ª—é–±–∏–º–∞—è": (False, "–≠—Ç–æ —Å–ª–∏—à–∫–æ–º —Ä–æ–º–∞–Ω—Ç–∏—á–Ω–æ –¥–ª—è —É—Ç—Ä–∞ ü§≠"),
            "–°–∫–æ–ª—å–∫–æ –≤—Ä–µ–º—è?": (False, "–≠—Ç–æ —è –æ–±—ã—á–Ω–æ —Å–ø—Ä–∞—à–∏–≤–∞—é üòâ"),
            "–ù–µ —Ç—Ä–æ–≥–∞–π –º–µ–Ω—è": (True, "‚úÖ –£—Ç—Ä–µ–Ω–Ω–∏–π —ë–∂–∏–∫!"),
            "–Ø —É–∂–µ —Å–¥–µ–ª–∞–ª –∫–æ—Ñ–µ": (False, "–ù–µ—Ç, —Ç—ã –º–æ–ª—á–∞ –µ–≥–æ –ø—Ä–∏–Ω–æ—Å–∏—à—å ‚òï")
     }
},
{
        "text": "4Ô∏è‚É£ –ì–¥–µ —á–∞—â–µ –≤—Å–µ–≥–æ –æ–∫–∞–∑—ã–≤–∞—é—Ç—Å—è —Ç–≤–æ–∏ –Ω–æ—Å–∫–∏?",
        "options": {
            "–í –±–µ–ª—å–µ–≤–æ–º —è—â–∏–∫–µ": (False, "–≠—Ç–æ –±—ã–ª–æ –±—ã —Å–ª–∏—à–∫–æ–º –∏–¥–µ–∞–ª—å–Ω–æ üòÖ"),
            "–ù–∞ —Å—É—à–∏–ª–∫–µ": (False, "–ï—Å–ª–∏ –ø–æ–≤–µ–∑—ë—Ç, –∫–æ–Ω–µ—á–Ω–æ..."),
            "–í –∑–∞–ª–µ –≤ —É–≥–ª—É": (True, "‚úÖ –•—Ä–æ–Ω–∏—á–µ—Å–∫–∏–π —Å–ª–µ–¥–æ–≤–∞—Ç–µ–ª—å –Ω–æ—Å–∫–æ–≤ –∑–Ω–∞–µ—Ç üòâ"),
            "–¢—ã —á—Ç–æ, —è –∏—Ö –≤—Å–µ–≥–¥–∞ —É–±–∏—Ä–∞—é": (False, "–ù—É-–Ω—É! üòè")
   }
},
{
        "text": "5Ô∏è‚É£ –ö—Ç–æ –ø—Ä–æ—Å—ã–ø–∞–µ—Ç—Å—è —Ä–∞–Ω—å—à–µ?",
        "options": {
            "–¢—ã": (False, "–î–∞ –Ω—É, —Å–µ—Ä—å—ë–∑–Ω–æ? üòÑ"),
            "–Ø": (False, "–í—Ä—è–¥ –ª–∏..."),
            "–û–±–∞ –æ–¥–Ω–æ–≤—Ä–µ–º–µ–Ω–Ω–æ": (False, "–≠—Ç–æ –±—ã–≤–∞–µ—Ç, –Ω–æ —Ä–µ–¥–∫–æ"),
            "–í—Å—ë –∑–∞–≤–∏—Å–∏—Ç –æ—Ç —Å–ª—É—á–∞—è": (True, "‚úÖ –°–∞–º—ã–π —Ä–µ–∞–ª–∏—Å—Ç–∏—á–Ω—ã–π –æ—Ç–≤–µ—Ç!")
  }
},
{
        "text": "6Ô∏è‚É£ –ß—Ç–æ –ª—é–±–∏—Ç —Ç–≤–æ—è –∂–µ–Ω–∞, –∞ —Ç—ã –Ω–µ –æ—á–µ–Ω—å?",
        "options": {
            "–ü–ª—è–∂–Ω—ã–π –æ—Ç–¥—ã—Ö": (False, "–≠—Ç–æ –≤—ã –æ–±–∞ –ª—é–±–∏—Ç–µ üèñÔ∏è"),
            "–¢—É—Ä–µ—Ü–∫–∏–µ —Å–µ—Ä–∏–∞–ª—ã": (True, "‚úÖ –î–∞–∞–∞, –æ—Å–æ–±–µ–Ω–Ω–æ —Å –¥—Ä–∞–º–æ–π!"),
            "–ó–∞–≤—Ç—Ä–∞–∫ –≤ —Ä–µ—Å—Ç–æ—Ä–∞–Ω–µ": (False, "–ù—É –∫–æ–º—É —ç—Ç–æ –Ω–µ –Ω—Ä–∞–≤–∏—Ç—Å—è? üòÖ"),
            "–ü–µ—à–∏–µ –ø—Ä–æ–≥—É–ª–∫–∏": (False, "–¢—ã –ø—Ä–æ—Å—Ç–æ –∂–∞–ª—É–µ—à—å—Å—è, –Ω–æ –∏–¥—ë—à—å üòÑ")
}
},
{
        "text": "7Ô∏è‚É£ –ó–∞ —á—Ç–æ —Ç–≤–æ—è –∂–µ–Ω–∞ —Ç–µ–±—è –±–æ–ª—å—à–µ –≤—Å–µ–≥–æ –ª—é–±–∏—Ç?",
        "options": {
            "–ó–∞ –∑–∞–±–æ—Ç—É": (False, "–≠—Ç–æ –≤–∞–∂–Ω–æ, –Ω–æ –Ω–µ –≤—Å—ë!"),
            "–ó–∞ —á—É–≤—Å—Ç–≤–æ —é–º–æ—Ä–∞": (False, "–°–º–µ—à–Ω–æ–π, –Ω–æ..."),
            "–ó–∞ –¥–æ–±—Ä–æ—Ç—É": (False, "–ú–∏–ª—ã–π, –Ω–æ —ç—Ç–æ –Ω–µ –≤—Å—ë ‚ù§Ô∏è"),
            "–ó–∞ –≤—Å—ë —ç—Ç–æ –≤–º–µ—Å—Ç–µ": (True, "‚úÖ –ù—É –∫–æ–Ω–µ—á–Ω–æ, –º–æ–π –ª—é–±–∏–º—ã–π!üíñ")
    }
},
{
        "text": "8Ô∏è‚É£ –¢–≤–æ—è —Å—É–ø–µ—Ä—Å–ø–æ—Å–æ–±–Ω–æ—Å—Ç—å ‚Äî —ç—Ç–æ:",
        "options": {
            "–í–∏–¥–µ—Ç—å —Ö–∞–æ—Å –∏ –æ—Å—Ç–∞–≤–∞—Ç—å—Å—è —Å–ø–æ–∫–æ–π–Ω—ã–º": (False, "–•–º... –Ω–µ –≤—Å–µ–≥–¥–∞ üòÖ"),
            "–ë—ã—Ç—å –º—É–∂—á–∏–Ω–æ–π –º–µ—á—Ç—ã": (False, "–ü–æ—á—Ç–∏ üòâ"),
            "–ù–∞—Ö–æ–¥–∏—Ç—å –≤–∫—É—Å–Ω—É—é –µ–¥—É": (False, "–≠—Ç–æ –¥–∞, –Ω–æ –Ω–µ —Ç–æ–ª—å–∫–æ!"),
            "–ó–∞–Ω–∏–º–∞—Ç—å –≤—Å—é –∫—Ä–æ–≤–∞—Ç—å": (False, "–ü—Ä–∞–≤–¥–∞... –Ω–æ –Ω–µ —Å—É–ø–µ—Ä—Å–ø–æ—Å–æ–±–Ω–æ—Å—Ç—å üòÜ"),
            "–í—Å—ë –≤–º–µ—Å—Ç–µ": (True, "‚úÖ –ò–¥–µ–∞–ª—å–Ω—ã–π –Ω–∞–±–æ—Ä üí™")
}
},
{
        "text": "9Ô∏è‚É£ –ß–µ–º —Ç—ã –≥–æ—Ä–¥–∏—à—å—Å—è –≤ —Å–µ–±–µ –±–æ–ª—å—à–µ –≤—Å–µ–≥–æ?",
        "options": {
            "–£–º–æ–º": (False, "–≠—Ç–æ –≤–∞–∂–Ω–æ, –Ω–æ –Ω–µ –≤—Å—ë"),
            "–°–ø–æ–∫–æ–π—Å—Ç–≤–∏–µ–º": (False, "–ù–µ –≤—Å–µ–≥–¥–∞, —á–µ—Å—Ç–Ω–æ"),
            "–°–∏–ª–æ–π": (False, "–ù—É, —Ç—ã –Ω–µ –•–∞–ª–∫ –∂–µ üòÖ"),
            "–ê –Ω–∞–¥–æ –≤—Å–µ–º –≤–º–µ—Å—Ç–µ üí™üß†üßò‚Äç‚ôÇÔ∏è": (True, "‚úÖ –ò–º–µ–Ω–Ω–æ! –í–æ—Ç —ç—Ç–æ —è –ø–æ–Ω–∏–º–∞—é üíØ")
}
},
{
        "text": "üîü –ö—É–¥–∞ –º—ã —Ç–æ—á–Ω–æ –Ω–∏–∫–æ–≥–¥–∞ –Ω–µ –ø–æ–µ–¥–µ–º –≤ –æ—Ç–ø—É—Å–∫?",
        "options": {
            "–û—Ç–≤–µ—Ç—å —Å–∞–º üòâ": (True, "üß≥ –ü—Ä–æ—Å—Ç–æ –∑–Ω–∞–π ‚Äî —è –≤—Å—ë –ø–æ–º–Ω—é üòÑ")
        }
    }
]
quiz_progress = {}

async def send_quiz_sequence(user_id):
    q_idx = quiz_progress.get(user_id, 0)
    if q_idx < len(questions):
        q = questions[q_idx]
        markup = InlineKeyboardMarkup()
        for option in q["options"].keys():
            markup.add(InlineKeyboardButton(option, callback_data=f"quiz_{q_idx}_{option}"))
        await bot.send_message(user_id, q["text"], reply_markup=markup)

@dp.callback_query_handler(lambda c: c.data.startswith("quiz_"))
async def handle_quiz_answer(callback_query: types.CallbackQuery):
    user_id = callback_query.from_user.id
    parts = callback_query.data.split("_", 2)
    if len(parts) < 3:
        await callback_query.answer("ü§î –ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π –æ—Ç–≤–µ—Ç")
        return

    q_idx_str, selected = parts[1], parts[2]
    try:
        q_idx = int(q_idx_str)
    except ValueError:
        await callback_query.answer("ü§î –ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π –æ—Ç–≤–µ—Ç")
        return

    if q_idx >= len(questions):
        await callback_query.answer("üß† –í–∏–∫—Ç–æ—Ä–∏–Ω–∞ —É–∂–µ –∑–∞–≤–µ—Ä—à–µ–Ω–∞.")
        return

    if quiz_progress.get(user_id, 0) > q_idx:
        await callback_query.answer("üîÅ –≠—Ç–æ—Ç –≤–æ–ø—Ä–æ—Å —É–∂–µ –ø—Ä–æ–π–¥–µ–Ω")
        return
        
        question = questions[q_idx]

    if selected in question["options"]:
        is_correct, comment = question["options"][selected]
        await callback_query.answer()
        await bot.send_message(user_id, comment)

        if is_correct:
            quiz_progress[user_id] = q_idx + 1
            await asyncio.sleep(1)
            if quiz_progress[user_id] < len(questions):
                await send_quiz_sequence(user_id)
            else:
                await bot.send_message(user_id, "üéâ –¢—ã –ø—Ä–æ—à—ë–ª –≤—Å–µ –≤–æ–ø—Ä–æ—Å—ã! üéÅ")
                await handle_quiz_completion(user_id)
        else:
            await bot.send_message(user_id, "‚ùå –ù–µ—Ç, –Ω–µ —Ç–∞–∫! –ü–æ–ø—Ä–æ–±—É–π –µ—â—ë —Ä–∞–∑.")
    else:
        await callback_query.answer("ü§î –ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π –æ—Ç–≤–µ—Ç")


async def send_hourly_compliments():
    while True:
        now = datetime.now()
        if 9 <= now.hour <= 21:
            index = (now.hour - 9) % len(photos_with_captions)
            for user_id in USER_IDS:
                photo, caption = photos_with_captions[index]
                try:
                    await bot.send_photo(chat_id=user_id, photo=InputFile(photo), caption=caption)
                except Exception as e:
                    logging.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —Ñ–æ—Ç–æ: {e}")
        await asyncio.sleep(3600)

async def on_startup(dp):
    asyncio.create_task(send_hourly_compliments())

if __name__ == "__main__":
    executor.start_polling(dp, skip_updates=True, on_startup=on_startup)
